#!/usr/bin/env bash
#
# Recursively converts all mp3 and ogg files in a directory to the specified
# codec, channel count, bitrate and sampling rate.
#
# Written by Nicolai Andrew Singh, 2016
#

# paths
indir=/home/nas/Music/todo
outdir=/home/nas/Music/converted

# conversion parameters
channel=2
bitrate=$((288 * 1024))
rate=44100
oggcodec=libvorbis
mp3codec=libmp3lame

function ifs_change
{
	oIFS="$IFS"
	IFS=`echo -en "\n\b"`
}

function ifs_revert
{
	IFS="$oIFS"
}

function get_proper_bitrate
{
	# ideally we should set the bitrate to the value specified in this
	# script, but if the file's bitrate is still lower, use that value
	# instead to avoid further loss of audio quality

	local b=$bitrate

	# ffprobe options:
	# - loglevel quiet                       =  silent output (no errors)
	# - print_format                         =  format output
	#     default=noprint_wrappers=1:nokey=1 =  hide headers (value only)
	# -show_entries format=bit_rate          =  show bitrate only
	local detected_bitrate=`ffprobe -loglevel quiet \
		-print_format \
			default=noprint_wrappers=1:nokey=1 \
		-show_entries format=bit_rate \
		"$file"`

	if [ -z "$detected_bitrate" ]; then
		local msg="Can't detect bitrate from file; will skip "
		msg+="bitrate comparison and use default: $b"
		prtwmsg "$msg"
	elif [ "$detected_bitrate" -lt "$bitrate" ]; then
		local msg="Detected bitrate ($detected_bitrate) is "
		msg+="less than the requested bitrate set ($b). "
		msg+="Using detected bitrate instead."
		prtwmsg "$msg"
		b=$detected_bitrate
	fi

	echo $b
}

function mkreloutdir
{
	local file=$1
	local filename=$2
	local fileoutdir

	# get path relative from indir and append to outdir
	fileoutdir=${outdir}${file#$indir}

	# make directories in $outdir similar to $file's structure in $indir
	local dir=${fileoutdir%"$filename"}
	mkdir -p $dir

	# return created directory's path
	echo "$dir"
}

function convert_ogg
{
	local file=$1
	local btrt=$2
	local fileoutdir=$3
	local filename=$4

	echo "    Converting... (Press 'q' to skip)"
	ffmpeg -loglevel warning \
		-y \
		-i "$file" \
	 	-acodec "$oggcodec" \
	 	-vn \
	 	-ac "$channel" \
	 	-ar "$rate" \
	 	-ab "$btrt" \
	 	"${fileoutdir}${filename}.ogg"
}

function convert_mp3
{
	local file=$1
	local btrt=$2
	local fileoutdir=$3
	local filename=$4

	echo "    Converting... (Press 'q' to skip)"
	ffmpeg -loglevel warning \
		-y \
		-i "$file" \
	 	-acodec "$mp3codec" \
	 	-vn \
	 	-ac "$channel" \
	 	-ar "$rate" \
	 	-ab "$btrt" \
	 	"${fileoutdir}${filename}.mp3"
}

function convert
{
	local file=$1
	local ftype=${file##*.}
	local btrt
	local reloutdir
	local filename=`basename "$file"`

	case $ftype in
	'flac')
		btrt=`get_proper_bitrate`
		prtimsg "[${ftype^^}=>OGG] (New bitrate: $btrt)" "$file"
		reloutdir=`mkreloutdir "$file" "$filename"`
		convert_ogg "$file" "$btrt" "$reloutdir" "$filename"
		;;
	'ogg')
		btrt=`get_proper_bitrate`
		prtimsg "[${ftype^^}=>OGG] (New bitrate: $btrt)" "$file"
		reloutdir=`mkreloutdir "$file" "$filename"`
		convert_ogg "$file" "$btrt" "$reloutdir" "$filename"
		;;
	'mp3')
		btrt=`get_proper_bitrate`
		prtimsg "[${ftype^^}=>MP3] (New bitrate: $btrt)" "$file"
		reloutdir=`mkreloutdir "$file" "$filename"`
		convert_mp3 "$file" "$btrt" "$reloutdir" "$filename"
		;;
	*)
		# file extension is not supported
		prtemsg "Don't know how to convert: $file"
		;;
	esac
}

function get_files
{
	# if $1 is empty, there are no more directores to recurse into
	if [ -n "$1" ]; then
		local searchdir="$1"

		# check for files to convert
		prtimsg '[CHECKING]' "$searchdir"
		for file in `find "$searchdir" -mindepth 1 -maxdepth 1 -type f`
		do
			convert "$file"
		done

		# check for subdirectories to recurse
		for dir in `find "$searchdir" -mindepth 1 -maxdepth 1 -type d`
		do
			get_files "$dir"
		done
	fi
}

function prtimsg
{
	echo -e "\e[1;34m$1\e[0m $2"
}

function prtwmsg
{
	echo -e "\e[1;31m[WARNING]\e[0m $1" >&2
}

function prtemsg
{
	echo -e "\e[1;31m[ERROR]\e[0m $1" >&2
}

if [ ! -d "$indir" ]; then
	echo " ** ERROR: $indir could not be found. Exiting..."
	exit
fi

if [ ! -d "$outdir" ]; then
	mkdir -p "$outdir"
fi

echo -e 'Batch convert music files\n'

ifs_change
get_files "$indir"
ifs_revert

echo 'All conversions finished. Bye!'

exit 0
